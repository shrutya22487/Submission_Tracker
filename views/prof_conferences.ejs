<%- include('partials/header') %>

<div class="container-fluid">
    <div class="row">


        <!-- Nav bar section -->
        <div class="col-md-3 sidebar" style="background-color: #e9ecef; height:100vh; position:fixed; z-index : 2;">
            <div class="jumbotron text-center" style="margin-bottom: 20px;">
                <h1 style="font-size: 5rem; font-weight: bold;">Rema.</h1>

            </div>
            <nav class="nav flex-column" style="margin:10px;">
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/students" role="button"
                   style="color: #000; font-weight:bold; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #303030; border-width:2px;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#303030'; this.style.color='#000';">
                    Students
                </a>
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/research_projects" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #fff;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#fff'; this.style.color='#000';">
                    Research Projects
                </a>
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/under_review_papers" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #fff;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#fff'; this.style.color='#000';">
                    Under Review Papers
                </a>
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/sponsored_projects" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #fff;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#fff'; this.style.color='#000';">
                    Sponsored Projects
                </a>
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/reading_list" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #ccc;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#ccc'; this.style.color='#000';">
                    Reading List
                </a>
                <a class="btn btn-dark btn-lg" href="/prof_dashboard/conferences" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #fff;"
                   onmouseover="this.style.backgroundColor='#303030'; this.style.borderColor='#303030'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#fff'; this.style.color='#000';">
                    Conferences
                </a>
                <a class="btn btn-dark btn-lg" href="/logout" role="button"
                   style="color:black; margin-top: 0.5%; margin-bottom:1%; padding:3%; background-color: #fff; border-color: #fff;"
                   onmouseover="this.style.backgroundColor='#a40000'; this.style.borderColor='#a40000'; this.style.color='#fff';"
                   onmouseout="this.style.backgroundColor='#fff'; this.style.borderColor='#fff'; this.style.color='#000';">
                    Logout
                </a>
            </nav>


        </div>

        <!-- Working console section -->
        <div class="col-md-6" style="background-color: #fff; width: 100%; height: 100vh; margin-left: auto; margin-right: auto;">
            <div id="working-console">

                <div class="jumbotron text-center" style="margin-bottom: 20px;">
                    <h1 style="font-size: 5rem; font-weight: bold;">Conferences</h1>
                </div>

                <!--Conferences-->

                <table border="1">
                    <thead>
                    <tr>
                        <th>Date</th>
                        <th>Title</th>
                        <th>Link</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody id="conference-table-body">
                    <% if (conferences && Array.isArray(conferences.rows)) {%>
                        <% conferences.rows.forEach(function(conference) { %>
                            <tr data-id="<%= conference.id %>">
                                <td><%= conference.date %></td>
                                <td><%= conference.title %></td>
                                <td><a href="<%= conference.link %>">Link</a></td>
                                <td>
                                    <button class="delete-btn" data-id="<%= conference.id %>">Delete</button>
                                </td>
                            </tr>
                        <% }); %>
                    <%}%>
                    </tbody>
                </table>

                <h2>Add Conference</h2>
                <form id="add-conference-form">
                    <label for="date">Date:</label>
                    <input type="date" id="date" name="date" ><br>

                    <label for="title">Title:</label>
                    <input type="text" id="title" name="title" required><br>

                    <label for="link">Link:</label>
                    <input type="url" id="link" name="link"><br>

                    <button type="submit">Add Conference</button>
                </form>
                <br>
                <br>
            </div>
        </div>

        <!-- Static Info Section -->

        <div class="col-md-3" style="background-color: #e9ecef; height: 100vh; right:0; position: fixed; z-index:4;">
            <div id="static-info">
                <!-- Title Section -->
                <div class="jumbotron text-center" style="margin-bottom: 20px;">
                    <h1 style="font-size: 5rem; font-weight: bold;">Rema.</h1>
                </div>

                <!-- Upcoming Deadlines Card -->
                <div class="card" style="margin-bottom: 20px;">
                    <div class="card-body">
                        <h2 class="card-title" style="font-size: 1.5rem; font-weight: bold;">Upcoming Deadlines</h2>
                        <ul class="list-unstyled" id="deadlines-list" style="padding-left: 20px;">
                            <li>Project Report: September 20, 2024<span class="remove-btn" onclick="removeItem(this)">x</span></li>
                            <li>Assignment 3 Submission: September 25, 2024<span class="remove-btn" onclick="removeItem(this)">x</span></li>
                            <li>Midterm Exam: October 5, 2024<span class="remove-btn" onclick="removeItem(this)">x</span></li>
                            <li>Research Proposal: October 10, 2024<span class="remove-btn" onclick="removeItem(this)">x</span></li>
                        </ul>
                        <!-- Edit Button to Add Deadline -->
                        <button class="btn btn-primary btn-sm" style="background-color:#808080"onclick="addDeadline()">Edit</button>
                    </div>
                </div>

                <!-- To-Do List Card -->
                <div class="card">
                    <div class="card-body">
                        <h2 class="card-title" style="font-size: 1.5rem; font-weight: bold;">To-Do List</h2>
                        <ul class="list-unstyled" id="todoList" style="padding-left: 20px;"></ul>
                        <!-- Template for each to-do item (invisible initially) -->
                        <template id="todoItemTemplate">
                            <li data-id="">
                                <span class="task-text"></span>
                                <button class="delete-todo">Delete</button>
                            </li>
                        </template>

                        <!-- Edit Button to Add To-Do -->
                        <button class="btn btn-primary btn-sm" style="background-color:#808080" onclick="addTodo()">Edit</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<style>
    .remove-btn {
        cursor: pointer;
        color: red;
        font-weight: bold;
        margin-left: 10px;
    }
</style>

<!-- JavaScript -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    ///////////////////////CONFERENCES FUNCTIONS //////////////////////////////////

    $(document).ready(function() {
        // Delete conference
        $('#conference-table-body').on('click', '.delete-btn', function() {
            const conferenceId = $(this).data('id');
            $.ajax({
                url: '/prof_dashboard/delete_conference',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ conference_id: conferenceId }),
                success: function(response) {
                    alert(response.message);
                    location.reload();
                },
                error: function(error) {
                    alert("Error deleting conference.");
                }
            });
        });

        // Add conference
        $('#add-conference-form').submit(function(e) {
            e.preventDefault();
            const formData = {
                date: $('#date').val(),
                title: $('#title').val(),
                link: $('#link').val()
            };
            $.ajax({
                url: '/prof_dashboard/add_conference',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    alert(response.message);
                    location.reload();
                },
                error: function(error) {
                    alert("Error adding conference.");
                }
            });
        });
    });


    ///////////////////////////////////////////////////////////////////////////////

    document.getElementById('search-bar').addEventListener('input', function() {
        const query = this.value;
        if (query.length > 0) {
            fetch(`/search?query=${query}`)
                .then(response => response.json())
                .then(data => {
                    const resultsDiv = document.getElementById('results');
                    resultsDiv.innerHTML = '';
                    data.forEach(student => {
                        const container = document.createElement('div');
                        container.className = 'tooltip-container';

                        const button = document.createElement('button');
                        button.innerText = student.name;
                        button.style = "width: 100%; padding: 10px 15px; margin-bottom: 10px; border: none; border-radius: 10px; background-color: #f9f9f9; text-align: left; font-size: 1rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1); cursor: pointer; transition: all 0.3s ease;";

                        const tooltip = document.createElement('div');
                        tooltip.className = 'tooltip';
                        tooltip.innerText = `Add ${student.name}?`;

                        container.appendChild(button);
                        container.appendChild(tooltip);
                        container.addEventListener('click', () => {
                            selectStudent(student.id);
                        });
                        resultsDiv.appendChild(container);
                    });
                })
                .catch(err => console.error('Error fetching students:', err));
        } else {
            document.getElementById('results').innerHTML = '';
        }
    });

    document.querySelectorAll('.archive_student_button').forEach(button => {
        button.addEventListener('click', function() {
            const studentId = this.getAttribute('data-student-id');

            fetch('/prof_dashboard/archive_student', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ student_id: studentId })
            })
                .then(response => {
                    if (response.ok) {
                        alert("Student archived successfully.");
                        window.location.reload();
                    } else {
                        alert("Failed to archive student.");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while archiving the student.");
                });
        });
    });

    document.querySelectorAll('.archive_job_button').forEach(button => {
        button.addEventListener('click', function() {
            const job_id = this.getAttribute('data-job-id');

            fetch('/prof_dashboard/archive_job', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ job_id: job_id })
            })
                .then(response => {
                    if (response.ok) {
                        alert("Job archived successfully.");
                        window.location.reload();
                    } else {
                        alert("Failed to archive Job.");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while archiving the Job.");
                });
        });
    });

    function selectStudent(student_id) {
        fetch('/prof_dashboard', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ student_id }),
        })
            .then(response => {
                if (response.ok) {
                    window.location.reload(); // This triggers the page reload
                } else {
                    return response.text().then(text => { throw new Error(text); });
                }
            })
            .catch(err => console.error('Error selecting student:', err));
    }

    // Function to add a new deadline
    function addDeadline() {
        let deadline = prompt("Enter the new deadline (e.g., 'New Deadline: Date'):");
        if (deadline) {
            const ul = document.getElementById('deadlines-list');
            const li = document.createElement('li');
            li.innerHTML = `${deadline}<span class="remove-btn" onclick="removeItem(this)">x</span>`;
            ul.appendChild(li);
        }
    }

    ////////////////////////////// TO-DO FUNCTIONS ///////////////////////////////////

    // function to get the todos
    function fetchTodos() {
        $.ajax({
            url: '/prof_dashboard/todo',
            type: 'GET',
            success: function (data) {
                const todoList = $('#todoList');
                todoList.empty(); // Clear the current list

                if (data.length > 0) {
                    data.forEach(todo => {
                        const template = $('#todoItemTemplate').html();
                        const newTodo = $(template).clone();

                        newTodo.attr('data-id', todo.id);
                        newTodo.find('.task-text').text(todo.task);
                        newTodo.find('.delete-todo').click(() => deleteTodo(todo.id));
                        todoList.append(newTodo);
                    });
                } else {
                    todoList.append('<li>No tasks found</li>');
                }
            },
            error: function () {
                alert('Error fetching tasks');
            }
        });
    }

    // Function to add a new To-Do item
    function addTodo() {
        let todo = prompt("Enter the new To-Do item:");
        if (todo) {

            // Make an AJAX request to add the task to the server
            $.ajax({
                url: '/prof_dashboard/add_todo',  // Ensure this URL matches your route
                type: 'POST',
                data: { task: todo },
                success: function () {
                    fetchTodos();

                },
                error: function () {
                    alert('Error adding task');
                }
            });
        }
    }

    // Function to delete a to-do task
    function deleteTodo(todoId) {
        $.ajax({
            url: '/prof_dashboard/delete_todo',
            type: 'POST',
            data: { todo_id: todoId },
            success: function () {
                fetchTodos();
            },
            error: function () {
                alert('Error deleting task');
            }
        });
    }

    // Fetch and display the tasks when the page loads
    $(document).ready(function () {
        fetchTodos();
    });
    /////////////////////////////////////////////////////////////////////////////////
</script>

<%- include('partials/footer') %>
